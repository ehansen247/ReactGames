{"version":3,"sources":["images/connect4.png","images/ticTacToe.png","components/homepage.js","components/c4Table.js","components/connect4.js","components/tttTable.js","components/ticTacToe.js","index.js"],"names":["module","exports","Homepage","style","textAlign","display","marginRight","marginTop","Card","hoverable","width","height","Img","variant","src","ticTacToeImg","Body","Button","href","connect4Img","Component","TableRow","clicked","event","key2","parseInt","target","dataset","col","props","add","row","r","this","key","className","data-col","onClick","backgroundColor","board","React","Connect4","i","j","newB","state","red","check","document","querySelector","innerHTML","won","setState","checkEach","over","rows","map","id","type","color","diag1","k","diag2","vert","horiz","click","move","TicTacToe","xTurn","turn","comp","desired","push","moves","getMoves","length","values","val","minimax","best","ind","depth","App","Navbar","bg","Brand","Nav","Link","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1de3af03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/connect4.f4cffc27.png\";","module.exports = __webpack_public_path__ + \"static/media/ticTacToe.65f1551e.png\";","import React, { Component } from 'react';\nimport connect4Img from '../images/connect4.png';\nimport ticTacToeImg from '../images/ticTacToe.png';\nimport { Card, Button } from 'react-bootstrap';\n\n// The website's homepage\nclass Homepage extends Component {\n  render() {\n    return (\n\n      <div style= {{textAlign: \"center\"}} >\n\n        {/* TicTacToe Card */}\n        <div style= {{display: \"inline-block\", marginRight: \"80px\", marginTop: \"100px\"}}>\n          <Card hoverable=\"true\" style={{ width: '240px', height: '290px' }}>\n            <Card.Img variant=\"top\" style={{width: '240px', height: '250px' }} src={ticTacToeImg} />\n            <Card.Body>\n              <Button variant=\"primary\" href=\"/ticTacToe\">Go To TicTacToe</Button>\n            </Card.Body>\n          </Card>\n        </div>\n\n        {/* Connect4 Card */}\n        <div style= {{display: \"inline-block\", marginTop: \"100px\"}}>\n          <Card hoverable=\"true\" style={{ width: '240px', height: '290px' }}>\n            <Card.Img variant=\"top\" style={{ width: '240px', height: '250px' }} src={connect4Img} />\n            <Card.Body>\n              <Button variant=\"primary\" href=\"/connect4\">Go To Connect4</Button>\n            </Card.Body>\n          </Card>\n        </div>\n\n      </div>\n\n    )\n  }\n}\n\nexport default Homepage;\n","import React from 'react';\nimport '../css/c4.css';\n\n// Represents a row in a Connect4 Game\nclass TableRow extends React.Component {\n\n  clicked = (event) => {\n    let key2 = parseInt(event.target.dataset.col);\n    this.props.add(parseInt(this.props.row), key2);\n  }\n\n  render() {\n    const r = this.props.row;\n\n    return (\n      <tr key={r}>\n        <td className=\"c4Square\" data-col=\"0\" onClick={this.clicked}>\n          <span data-col=\"0\" className=\"dot\" style={{backgroundColor: this.props.board[r][0]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"1\" onClick={this.clicked}>\n          <span data-col=\"1\" className=\"dot\" style={{backgroundColor: this.props.board[r][1]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"2\" onClick={this.clicked}>\n          <span data-col=\"2\" className=\"dot\" style={{backgroundColor: this.props.board[r][2]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"3\" onClick={this.clicked}>\n          <span data-col=\"3\" className=\"dot\" style={{backgroundColor: this.props.board[r][3]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"4\" onClick={this.clicked}>\n          <span data-col=\"4\" className=\"dot\" style={{backgroundColor: this.props.board[r][4]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"5\" onClick={this.clicked}>\n          <span data-col=\"5\" className=\"dot\" style={{backgroundColor: this.props.board[r][5]}}></span>\n        </td>\n        <td className=\"c4Square\" data-col=\"6\" onClick={this.clicked}>\n          <span data-col=\"6\" className=\"dot\" style={{backgroundColor: this.props.board[r][6]}}></span>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default TableRow;\n","import React, { Component } from 'react';\nimport TableRow from './c4Table.js';\nimport '../css/c4.css';\n\n// Represents a game of Connect4\nclass Connect4 extends Component {\n\n  // Initialize a blank game of Connect4\n  constructor(props) {\n    super(props);\n    var myGrid = [[\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n    [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n    [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n    [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n    [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"],\n    [\"white\", \"white\", \"white\", \"white\", \"white\", \"white\", \"white\"]]\n\n    this.state = {\n      col: -1,\n      red: true,\n      over: false,\n      board: myGrid,\n      won: false\n    };\n  }\n\n  // Renders the current gameboard of Connect4\n  render() {\n    const rows = this.state.board.map((row, i) =>\n      {\n        return (\n            <TableRow key={i}\n              row={i}\n              add={this.add}\n              board={this.state.board}\n            />\n        );\n      });\n    return (\n\n\n      <div>\n        <br></br>\n        <h2>Connect4</h2>\n\n        {/* eslint-disable-next-line */}\n        <h1 id=\"gameOver\"></h1>\n\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n        <br />\n        <form>\n          <button type=\"submit\">Reset Board</button>\n        </form>\n        <br></br>\n        <br></br>\n      </div>\n    );\n  }\n\n  // Adds a new move to the board\n  add = (i, j) => {\n    let newB = this.state.board;\n    if (newB[i][j] !== \"white\")\n      return;\n    while(i < 5 && newB[i + 1][j] === \"white\")\n    {\n      i++;\n    }\n    if (this.state.red)\n    {\n      newB[i][j] = \"red\";\n    }\n    else\n    {\n      newB[i][j] = \"black\";\n    }\n\n    if (this.check(newB))\n    {\n      document.querySelector(\"#gameOver\").innerHTML= (this.state.red ? \"Red\" : \"Black\") + \" Wins!\";\n      if (!this.state.won)\n      {\n        this.setState({\n          board: newB,\n          won: true\n        });\n      }\n      return;\n    }\n    this.setState({\n      board: newB,\n      red: !this.state.red\n    });\n  }\n\n  // Checks if the board has been won\n  check = (board) => {\n    for (let i = 0; i < 6; i++)\n    {\n      for (let j = 0; j < 7; j++)\n      {\n        if(this.checkEach(board, i, j))\n        {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // Checking helper method, checks diagonals, verticals, and horizontals\n  checkEach(board, i, j)\n  {\n    // Checking diagonal, just need to go up and to the right,\n    let color = board[i][j];\n    if (color === \"white\")\n      return false;\n\n    let diag1 = true;\n    for (let k = 1; k < 4; k++)\n    {\n      if (i + k > 5 || j + k > 6)\n      {\n        diag1 = false;\n        break;\n      }\n      if (board[i + k][j + k] !== color)\n      {\n        diag1 = false;\n      }\n    }\n\n    let diag2 = true;\n    for (let k = 1; k < 4; k++)\n    {\n      if (i - k < 0 || j + k > 6)\n      {\n        diag2 = false;\n        break;\n      }\n      if (board[i - k][j + k] !== color)\n      {\n        diag2 = false;\n      }\n    }\n\n    // Check vertical\n    let vert = true;\n    for (let k = 1; k < 4; k++)\n    {\n      if (i + k > 5)\n      {\n        vert = false;\n        break;\n      }\n      if (board[i + k][j] !== color)\n      {\n        vert = false;\n      }\n    }\n\n    let horiz = true;\n    for (let k = 1; k < 4; k++)\n    {\n      if (j + k > 6)\n      {\n        horiz = false;\n        break;\n      }\n      if (board[i][j + k] !== color)\n      {\n        horiz = false;\n      }\n    }\n\n    if (vert || horiz || diag1 || diag2)\n    {\n      return true;\n    }\n    return false;\n  }\n\n}\n\nexport default Connect4;\n","import React from 'react';\n\n// Represents a row in a TicTacToe game\nclass TableRow extends React.Component {\n\n  // Triggers the move function in ticTacToe.js\n  click = (event) =>\n  {\n    this.props.move(this.props.row, parseInt(event.target.dataset.col));\n  }\n\n  // Renders a row\n  render()\n  {\n    const r = this.props.row;\n    const row = this.props.board[r];\n    return (\n      <tr>\n        <td className=\"tttSquare\" data-col=\"0\" onClick={this.click}>{row[0]}</td>\n        <td className=\"tttSquare\" data-col=\"1\" onClick={this.click}>{row[1]}</td>\n        <td className=\"tttSquare\" data-col=\"2\" onClick={this.click}>{row[2]}</td>\n      </tr>\n    );\n  }\n}\n\nexport default TableRow;\n","import React, { Component } from 'react';\nimport '../css/ttt.css';\nimport TableRow from './tttTable';\n\n// Represents a game of TicTacToe\nclass TicTacToe extends Component {\n\n    // TicTacToe constructor\n    constructor(props)\n    {\n      super(props);\n      let board = [[\" \", \" \", \" \"], [\" \", \" \", \" \"], [\" \", \" \", \" \"]];\n      this.state = {\n        over: false,\n        xTurn: true,\n        board: board\n      };\n    }\n\n    // Render a live TicTacToe game\n    render() {\n      const rows = this.state.board.map((row, i) =>\n      {\n        return (\n          <TableRow\n            key = {i}\n            row = {i}\n            board = {this.state.board}\n            move = {this.move}\n          />\n        );\n      });\n\n      return (\n        <div>\n        <br></br>\n        <h2>TicTacToe</h2>\n\n        {/* eslint-disable-next-line */}\n        <h1 id=\"gameOver\"></h1>\n\n         <table>\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n\n          <br />\n          <button onClick={this.comp}>Computer Move</button>\n          <br/> <br />\n\n          <form>\n              <button type=\"submit\">Reset Board</button>\n          </form>\n          <br />\n\n        </div>\n      );\n    }\n\n    // Register a move\n    move = (i, j) =>\n    {\n\n      // Check if the game ended on previous turn, otherwise process move\n      if (this.state.over) { return; };\n\n      // Input next move\n      let newB = this.state.board;\n      if (newB[i][j] !== \" \")\n        return;\n      if (this.state.xTurn)\n      {\n        newB[i][j] = \"X\";\n      }\n      else\n      {\n        newB[i][j] = \"O\";\n      }\n\n      // Check if the game ended on that turn\n      if (this.check(newB, newB[i][j]))\n      {\n        document.querySelector(\"#gameOver\").innerHTML= (this.state.xTurn ? \"X\" : \"O\") + \" Wins!\";\n        if (!this.state.over)\n        {\n          this.setState({\n            board: newB,\n            over: true\n          });\n        }\n        return;\n      }\n\n      // Update game state\n      this.setState({\n        board: newB,\n        xTurn: !this.state.xTurn\n      });\n\n    }\n\n    // Check if the board has been won\n    check = (board, turn) =>\n    {\n      let diag1 = true;\n      let diag2 = true;\n      let horiz = true;\n      let vert = true;\n\n      for (let i = 0; i < 3; i++)\n      {\n        for (let j = 0; j < 3; j++)\n        {\n          if(board[i][j] !== turn)\n          {\n            horiz = false;\n          }\n\n          if(board[j][i] !== turn)\n          {\n            vert = false;\n          }\n        }\n        if (horiz === true || vert === true)\n          return true;\n        else\n        {\n          horiz = true;\n          vert = true;\n        }\n        if (board[i][i] !== turn)\n          diag1 = false;\n        if (board[i][2 - i] !== turn)\n          diag2 = false;\n      }\n\n      return diag1 || diag2;\n    }\n\n    // Computer Move\n    comp = () =>\n    {\n      let turn = \"\";\n      let desired = 0;\n\n      // Looking to maximize minimax score if X's turn, otherwise minimize\n      if (this.state.xTurn)\n      {\n        turn = \"X\";\n        desired = 1;\n      }\n      else\n      {\n        turn = \"O\";\n        desired = -1;\n      }\n\n\n      let newB = [];\n\n      // Copy over the current board\n      for (let i = 0; i < 3; i++)\n      {\n        let row = [];\n        for (let j = 0; j < 3; j++)\n        {\n          row.push(this.state.board[i][j]);\n        }\n        newB.push(row);\n      }\n\n      // Get all possible moves available on the board\n      let moves = this.getMoves(newB);\n      if (moves.length === 0)\n      {\n        return;\n      }\n      if (this.state.over) {\n        return;\n      }\n\n      let values = [];\n\n      // Consults the values returned by minimax for each possible move\n      for (let i = 0; i < moves.length; i++)\n      {\n        let move = moves[i];\n        newB[move[0]][move[1]] = turn;\n        let val = this.minimax(newB, desired, 1);\n\n        values.push(val);\n        newB[move[0]][move[1]] = \" \";\n      }\n\n      // Finds the best move by score returned by minimax\n      let best = values[0];\n      let ind = 0;\n      for (let i = 0; i < values.length; i++)\n      {\n        if (desired === 1)\n        {\n          if (values[i] > best)\n          {\n            best = values[i];\n            ind = i;\n          }\n        }\n        else {\n          if (values[i] < best)\n          {\n            best = values[i];\n            ind = i;\n          }\n        }\n      }\n\n      // Inputs the most recent move\n      newB[moves[ind][0]][moves[ind][1]] = turn;\n      this.setState({\n        board: newB,\n        xTurn: !this.state.xTurn\n      });\n\n      // Checks if the game has ended\n      if (this.check(newB, \"O\") || this.check(newB, \"X\"))\n      {\n        document.querySelector(\"#gameOver\").innerHTML = turn + \" Wins!\";\n        this.setState({\n            over: true\n        });\n      }\n    }\n\n    // DFS Minimax Algorithm to determine best available move\n    // The computer computes the score of a move by playing against itself\n    // after that move and seeing if it can force a win > tie > loss.\n    minimax = (board, desired, depth) => {\n      let moves = this.getMoves(board);\n      let turn = \"X\";\n\n      // Looking to maximize the game score for X, minimize for O\n      // Desired is reversed, because we are looking at the first\n      // RESPONSE by the computer, not the initial move\n      if (desired < 0)\n        turn = \"X\";\n      else\n        turn = \"O\";\n\n      // Counting depth means the computer will prioritize more immediate wins\n      // O has won in this state\n      if (this.check(board, \"O\"))\n        return -10 + depth;\n\n      // X has won in this state\n      if (this.check(board, \"X\"))\n        return 10 - depth;\n\n      // A tie in this state, no moves remaining, neither has won\n      if (moves.length === 0)\n          return 0;\n\n      // Recursively calls minimax and finds the score for each move available\n      // in this new game state\n      let values = [];\n      for (let i = 0; i < moves.length; i++)\n      {\n        let move = moves[i];\n        board[move[0]][move[1]] = turn;\n        let val = this.minimax(board, -desired, depth + 1);\n        values.push(val);\n        board[move[0]][move[1]] = \" \";\n      }\n\n      // Determines the best move for the given turn\n      let best = values[0];\n      for (let i = 0; i < values.length; i++)\n      {\n        if (desired < 0) // worst case\n        {\n          if (values[i] > best)\n            best = values[i];\n        }\n        else\n        {\n          if (values[i] < best)\n            best = values[i];\n        }\n      }\n      return best\n    }\n\n    // Gets all possible remaining moves on the board (open squares)\n    getMoves = (board) =>\n    {\n      let moves = [];\n      for (let i = 0; i < 3; i++)\n      {\n        for (let j = 0; j < 3; j++)\n        {\n\n          if (board[i][j] === \" \")\n          {\n            let row = [];\n            row.push(i);\n            row.push(j);\n            moves.push(row);\n          }\n        }\n      }\n      return moves;\n    }\n  }\n\nexport default TicTacToe;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport Homepage from './components/homepage';\nimport Connect4 from './components/connect4';\nimport TicTacToe from './components/ticTacToe';\n\nimport './css/index.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Navbar bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand>React-Games</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"connect4\">Connect4</Nav.Link>\n              <Nav.Link href=\"ticTacToe\">TicTacToe</Nav.Link>\n            </Nav>\n          </Navbar>\n\n          <Route path=\"/\" exact component={ Homepage } />\n          <Route path=\"/connect4\" component={ Connect4 } />\n          <Route path=\"/ticTacToe\" component={ TicTacToe } />\n        </Router>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}